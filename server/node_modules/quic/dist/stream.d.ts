/// <reference types="node" />
import { Duplex } from 'stream';
import { StreamID } from './internal/protocol';
import { StreamFrame, RstStreamFrame } from './internal/frame';
import { kID, kFC, kSession, kState } from './internal/symbol';
import { Session } from './session';
export declare class Stream extends Duplex {
    private [kID];
    private [kSession];
    private [kState];
    private [kFC];
    constructor(streamID: StreamID, session: Session, options: any);
    readonly id: number;
    readonly session: Session;
    readonly aborted: boolean;
    readonly destroyed: boolean;
    readonly bytesRead: number;
    readonly bytesWritten: number;
    close(err: any): Promise<any>;
    _write(chunk: Buffer, encoding: string, callback: (...args: any[]) => void): void;
    _writev(chunks: any[], callback: (...args: any[]) => void): void;
    _final(callback: (...args: any[]) => void): void;
    _read(size?: number): void;
    _destroy(err: any, callback: (...args: any[]) => void): void;
    _sendBlockFrame(): void;
    _trySendUpdateWindow(): void;
    _handleFrame(frame: StreamFrame, rcvTime: number): void;
    _handleRstFrame(frame: RstStreamFrame, rcvTime: number): void;
    _tryFlushCallbacks(): void;
    private _isRemoteWriteable(byteLen);
    private _flushData(bufv, callback);
}
